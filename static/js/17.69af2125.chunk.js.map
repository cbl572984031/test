{"version":3,"sources":["page/UI/Comment.jsx","store/comment/action.js"],"names":["TextArea","CommentList","comments","this","props","dataSource","itemLayout","renderItem","actions","id","onClick","e","handleReply","key","children","length","React","Component","Comments","state","value","handleSubmit","obj","author","avatar","content","datetime","moment","fromNow","add","setState","handleChange","target","setReplyId","Fragment","src","alt","Item","rows","onChange","htmlType","type","connect","Comment","remove","data"],"mappings":"sTAMQA,E,IAAAA,SAEFC,E,iLACQ,IAAD,OACCC,EAAWC,KAAKC,MAAMF,SAC5B,OACI,uBACIG,WAAYH,EACZI,WAAW,aACXC,WAAY,SAAAH,GAAK,OACb,uCAAaA,EAAb,CACII,QAASJ,EAAMK,GAAK,CAAC,0BACjBC,QAAS,SAAAC,GAAO,EAAKP,MAAMQ,YAAYR,EAAMK,KAC7CI,IAAI,2BAFa,aAGjB,KAGHT,EAAMU,UAAYV,EAAMU,SAASC,OAC9B,kBAACd,EAAD,CAAaW,YAAa,SAAAD,GAAO,EAAKP,MAAMQ,YAAYD,IAAMT,SAAUE,EAAMU,WAAe,W,GAhB/FE,IAAMC,WAwB1BC,E,2MACFC,MAAQ,CACJC,MAAO,GACPX,GAAI,M,EAGRY,aAAe,WACX,GAAK,EAAKF,MAAMC,MAAhB,CAIA,IAAME,EAAM,CACRC,OAAQ,WACRC,OAAQ,mEACRC,QAAS,2BAAI,EAAKN,MAAMC,OACxBM,SAAUC,MAASC,WAElB,EAAKT,MAAMV,KACZa,EAAIb,GAAK,EAAKL,MAAMF,SAASa,OAAS,EACtCO,EAAIR,SAAW,IAEnB,EAAKV,MAAMyB,IAAIP,EAAK,EAAKH,MAAMV,IAC/B,EAAKqB,SAAS,CACVV,MAAO,GACPX,GAAI,S,EAIZsB,aAAe,SAAApB,GACX,EAAKmB,SAAS,CACVV,MAAOT,EAAEqB,OAAOZ,S,EAIxBa,WAAa,SAACxB,GACV,EAAKqB,SAAS,CACVrB,Q,wEAIE,IAAD,OACGW,EAAUjB,KAAKgB,MAAfC,MACR,OACI,kBAAC,IAAMc,SAAP,KACK/B,KAAKC,MAAMF,SAASa,OAAS,GAAK,kBAACd,EAAD,CAAaW,YAAa,SAAAD,GAAO,EAAKsB,WAAWtB,IAAMT,SAAUC,KAAKC,MAAMF,WAC/G,uBACIsB,OACI,uBACIW,IAAI,mEACJC,IAAI,aAGZX,QACI,6BACI,sBAAMY,KAAN,KACI,kBAACrC,EAAD,CAAUsC,KAAM,EAAGC,SAAU,SAAA5B,GAAO,EAAKoB,aAAapB,IAAMS,MAAOA,KAEvE,sBAAMiB,KAAN,KACI,uBAAQG,SAAS,SAAS9B,QAAS,SAAAC,GAAO,EAAKU,aAAaV,IAAM8B,KAAK,WAAvE,wB,GA1DTzB,IAAMC,WAsEdyB,uBAAQ,SAAAvB,GAAK,MAAK,CAC7BjB,SAAUiB,EAAMwB,WAChB,CACId,QACAe,YAJOF,CAMbxB,I,iCC5GF,gFAEaW,EAAM,SAACgB,EAAMpC,GACtB,MAAO,CACHgC,KAAMA,IACNI,OACApC,OAIKmC,EAAS,WAClB,MAAO,CACHH,KAAMA","file":"static/js/17.69af2125.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Comment, Avatar, Form, Button, List, Input } from 'antd';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport { add, remove } from '../../store/comment/action';\r\n\r\nconst { TextArea } = Input;\r\n\r\nclass CommentList extends React.Component {\r\n    render() {\r\n        const comments = this.props.comments\r\n        return (\r\n            <List\r\n                dataSource={comments}\r\n                itemLayout=\"horizontal\"\r\n                renderItem={props =>\r\n                    <Comment {...props}\r\n                        actions={props.id ? [<span\r\n                            onClick={e => { this.props.handleReply(props.id) }}\r\n                            key=\"comment-list-reply-to-0\" >Reply to</span>\r\n                        ] : ''\r\n                        }\r\n                    >\r\n                        {props.children && props.children.length ?\r\n                            <CommentList handleReply={e => { this.props.handleReply(e) }} comments={props.children} /> : ''}\r\n                    </Comment>\r\n                }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nclass Comments extends React.Component {\r\n    state = {\r\n        value: '',\r\n        id: null,\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        if (!this.state.value) {\r\n            return;\r\n        }\r\n\r\n        const obj = {\r\n            author: 'Han Solo',\r\n            avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\r\n            content: <p>{this.state.value}</p>,\r\n            datetime: moment().fromNow()\r\n        }\r\n        if (!this.state.id) {\r\n            obj.id = this.props.comments.length + 1\r\n            obj.children = []\r\n        }\r\n        this.props.add(obj, this.state.id)\r\n        this.setState({\r\n            value: '',\r\n            id: null\r\n        });\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            value: e.target.value,\r\n        });\r\n    };\r\n\r\n    setReplyId = (id) => {\r\n        this.setState({\r\n            id\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { value } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                {this.props.comments.length > 0 && <CommentList handleReply={e => { this.setReplyId(e) }} comments={this.props.comments} />}\r\n                <Comment\r\n                    avatar={\r\n                        <Avatar\r\n                            src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\r\n                            alt=\"Han Solo\"\r\n                        />\r\n                    }\r\n                    content={\r\n                        <div>\r\n                            <Form.Item>\r\n                                <TextArea rows={4} onChange={e => { this.handleChange(e) }} value={value} />\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                <Button htmlType=\"submit\" onClick={e => { this.handleSubmit(e) }} type=\"primary\">\r\n                                    Add Comment\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </div>\r\n                    }\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(state => ({\r\n    comments: state.Comment\r\n}), {\r\n        add,\r\n        remove\r\n    }\r\n)(Comments)\r\n","import * as type from './actionTypes'\r\n\r\nexport const add = (data, id) => {\r\n    return {\r\n        type: type.ADD_COMMENT,\r\n        data,\r\n        id\r\n    }\r\n}\r\n\r\nexport const remove = () => {\r\n    return {\r\n        type: type.REMOVE_COMMENT\r\n    }\r\n}"],"sourceRoot":""}